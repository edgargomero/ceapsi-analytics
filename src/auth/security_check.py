#!/usr/bin/env python3
"""
CEAPSI Security Check
Verifica la configuraci√≥n de seguridad del sistema
"""

import os
import sys
from pathlib import Path
from dotenv import load_dotenv
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger('SECURITY_CHECK')

def check_environment():
    """Verifica variables de entorno cr√≠ticas"""
    print("üîç Verificando configuraci√≥n de entorno...")
    
    # Cargar variables de entorno
    env_file = Path('.env')
    if not env_file.exists():
        print("‚ùå CR√çTICO: Archivo .env no encontrado")
        return False
    
    load_dotenv()
    
    # Variables cr√≠ticas
    critical_vars = [
        'SUPABASE_URL',
        'SUPABASE_KEY', 
        'SUPABASE_PROJECT_REF'
    ]
    
    missing_vars = []
    for var in critical_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå CR√çTICO: Variables faltantes: {missing_vars}")
        return False
    
    print("‚úÖ Variables de entorno configuradas")
    return True

def check_supabase_connection():
    """Verifica conexi√≥n con Supabase"""
    print("üîç Verificando conexi√≥n Supabase...")
    
    try:
        from supabase_auth import SupabaseAuthManager
        auth_manager = SupabaseAuthManager()
        
        if not auth_manager.is_available():
            print("‚ùå CR√çTICO: No se puede conectar con Supabase")
            return False
            
        print("‚úÖ Conexi√≥n Supabase establecida")
        return True
        
    except ImportError as e:
        print(f"‚ùå CR√çTICO: No se puede importar supabase_auth: {e}")
        return False
    except Exception as e:
        print(f"‚ùå CR√çTICO: Error conexi√≥n Supabase: {e}")
        return False

def check_security_files():
    """Verifica archivos de seguridad"""
    print("üîç Verificando archivos de seguridad...")
    
    # Archivos que NO deben existir en producci√≥n
    insecure_files = [
        'config.yaml',
        'auth.py',
        'test_credentials.json'
    ]
    
    found_insecure = []
    for file in insecure_files:
        if Path(file).exists():
            found_insecure.append(file)
    
    if found_insecure:
        print(f"‚ö†Ô∏è  ADVERTENCIA: Archivos inseguros encontrados: {found_insecure}")
        print("   Recomendaci√≥n: Mover a carpeta legacy/")
    
    # Archivos cr√≠ticos que deben existir
    required_files = [
        'supabase_auth.py',
        '.env',
        '.gitignore'
    ]
    
    missing_files = []
    for file in required_files:
        if not Path(file).exists():
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå CR√çTICO: Archivos requeridos faltantes: {missing_files}")
        return False
    
    print("‚úÖ Archivos de seguridad verificados")
    return True

def check_gitignore():
    """Verifica configuraci√≥n .gitignore"""
    print("üîç Verificando .gitignore...")
    
    gitignore_file = Path('.gitignore')
    if not gitignore_file.exists():
        print("‚ùå CR√çTICO: Archivo .gitignore no encontrado")
        return False
    
    content = gitignore_file.read_text()
    
    # Patrones cr√≠ticos que deben estar en .gitignore
    critical_patterns = ['.env', '*.toml', '*_credentials.*']
    
    missing_patterns = []
    for pattern in critical_patterns:
        if pattern not in content:
            missing_patterns.append(pattern)
    
    if missing_patterns:
        print(f"‚ö†Ô∏è  ADVERTENCIA: Patrones faltantes en .gitignore: {missing_patterns}")
        return False
    
    print("‚úÖ Configuraci√≥n .gitignore correcta")
    return True

def check_dependencies():
    """Verifica dependencias de seguridad"""
    print("üîç Verificando dependencias...")
    
    try:
        import supabase
        import dotenv
        print("‚úÖ Dependencias cr√≠ticas instaladas")
        return True
    except ImportError as e:
        print(f"‚ùå CR√çTICO: Dependencia faltante: {e}")
        print("   Ejecutar: pip install supabase python-dotenv")
        return False

def check_app_security():
    """Verifica configuraci√≥n de seguridad en app.py"""
    print("üîç Verificando configuraci√≥n app.py...")
    
    app_file = Path('app.py')
    if not app_file.exists():
        print("‚ùå CR√çTICO: app.py no encontrado")
        return False
    
    content = app_file.read_text()
    
    # Verificar que NO use sistema YAML
    if 'AuthManager()' in content and 'auth.py' in content:
        print("‚ö†Ô∏è  ADVERTENCIA: Posible referencia al sistema YAML legacy")
    
    # Verificar que use SOLO Supabase
    if 'SUPABASE_AUTH_AVAILABLE' not in content:
        print("‚ùå CR√çTICO: Sistema Supabase no implementado correctamente")
        return False
    
    print("‚úÖ Configuraci√≥n app.py verificada")
    return True

def check_production_readiness():
    """Verifica configuraci√≥n para producci√≥n"""
    print("üîç Verificando configuraci√≥n de producci√≥n...")
    
    environment = os.getenv('ENVIRONMENT', 'development')
    debug = os.getenv('DEBUG', 'true').lower() == 'true'
    
    if environment == 'development':
        print("‚ö†Ô∏è  ADVERTENCIA: Aplicaci√≥n en modo desarrollo")
        print("   Para producci√≥n: ENVIRONMENT=production en .env")
    
    if debug and environment == 'production':
        print("‚ö†Ô∏è  ADVERTENCIA: DEBUG activado en producci√≥n")
        print("   Para producci√≥n: DEBUG=false en .env")
    
    print("‚úÖ Configuraci√≥n de producci√≥n revisada")
    return True

def main():
    """Ejecuta verificaci√≥n completa de seguridad"""
    print("=" * 60)
    print("üîí CEAPSI - Verificaci√≥n de Seguridad")
    print("=" * 60)
    
    checks = [
        check_dependencies,
        check_environment,
        check_supabase_connection,
        check_security_files,
        check_gitignore,
        check_app_security,
        check_production_readiness
    ]
    
    passed = 0
    total = len(checks)
    
    for check in checks:
        try:
            if check():
                passed += 1
            print("-" * 40)
        except Exception as e:
            print(f"‚ùå ERROR en verificaci√≥n: {e}")
            print("-" * 40)
    
    print("=" * 60)
    print(f"üìä RESULTADO: {passed}/{total} verificaciones pasadas")
    
    if passed == total:
        print("üéâ SISTEMA SEGURO - Listo para producci√≥n")
        return True
    elif passed >= total * 0.8:
        print("‚ö†Ô∏è  ADVERTENCIAS ENCONTRADAS - Revisar antes de producci√≥n")
        return False
    else:
        print("üö® PROBLEMAS CR√çTICOS - NO usar en producci√≥n")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)